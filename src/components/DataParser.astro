---
interface Event {
  serviceType: string;
  statusChangeDateTime: string;
  newStatus: string;
}

interface Data {
  events: Event[];
}

export function parseData(data: Data) {
  const MAX_PERIOD = 90;

  // Make an array with unique serviceType
  const uniqueServiceTypes = Array.from(
    new Set(data.events.map((event) => event.serviceType))
  );

  // Create an object to hold arrays of days for each serviceType, fixing the type error by explicitly defining the accumulator type
  const serviceTypeDays: { [key: string]: (string | null)[] } =
    uniqueServiceTypes.reduce(
      (acc: { [key: string]: (string | null)[] }, serviceType) => {
        acc[serviceType] = Array(MAX_PERIOD).fill(null); // Initialize days with null
        return acc;
      },
      {}
    );

  // Sort all events by date
  const sortedEvents = data.events.sort(
    (a, b) =>
      new Date(a.statusChangeDateTime).getTime() -
      new Date(b.statusChangeDateTime).getTime()
  );

  // Iterate over all events, fixing the type error by ensuring we are performing arithmetic operations on numbers
  sortedEvents.forEach((event) => {
    const serviceTypeArray = serviceTypeDays[event.serviceType];
    const eventDate = new Date(event.statusChangeDateTime).getTime();
    const today = new Date().getTime();
    const diffTime = Math.abs(today - eventDate);
    const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));

    console.log(
      `Event Date: ${event.statusChangeDateTime}, Today: ${new Date().toISOString()}, DiffDays: ${diffDays}`
    );

    // When event is found, add days to array with days with status (defined by newStatus)
    if (diffDays <= MAX_PERIOD) {
      const startIndex = MAX_PERIOD - diffDays;
      console.log(
        `Filling from index ${startIndex} for serviceType ${event.serviceType} with status ${event.newStatus}`
      );
      for (let i = startIndex; i < MAX_PERIOD; i++) {
        serviceTypeArray[i] = event.newStatus;
        console.log(
          `Updating index ${i} for serviceType ${event.serviceType} with status ${event.newStatus}`
        );
      }
    }
  });

  console.log(serviceTypeDays);

  // When all dates filled for each serviceType, stop iterating
  // The serviceTypeDays object now contains arrays of days with statuses for each serviceType
  return serviceTypeDays;
}
---

<!-- This component does not render anything by itself -->
