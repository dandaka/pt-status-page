---
interface Event {
  serviceType: string;
  statusChangeDateTime: string;
  newStatus: string;
}

interface Data {
  events: Event[];
}

interface StatusDatePair {
  status: string;
  date: string;
}

interface ServiceTypeDays {
  [key: string]: (StatusDatePair | null)[];
}

export function parseData(data: Data) {
  const MAX_PERIOD = 90;

  // Make an array with unique serviceType
  const uniqueServiceTypes = Array.from(
    new Set(data.events.map((event) => event.serviceType))
  );

  // Create an object to hold arrays of days for each serviceType, now including both status and date
  const serviceTypeDays: ServiceTypeDays =
    uniqueServiceTypes.reduce(
      (acc: ServiceTypeDays, serviceType) => {
        acc[serviceType] = Array(MAX_PERIOD).fill(null); // Initialize days with null
        return acc;
      },
      {}
    );

  // Sort all events by date
  const sortedEvents = data.events.sort(
    (a, b) =>
      new Date(a.statusChangeDateTime).getTime() -
      new Date(b.statusChangeDateTime).getTime()
  );

  // Iterate over all events, now storing both status and date
  sortedEvents.forEach((event) => {
    const serviceTypeArray = serviceTypeDays[event.serviceType];
    const eventDate = new Date(event.statusChangeDateTime).getTime();
    const today = new Date().getTime();
    const diffTime = Math.abs(today - eventDate);
    const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));

    for (let i = 0; i < MAX_PERIOD; i++) {
      const date = new Date(today - (MAX_PERIOD - i - 1) * (1000 * 60 * 60 * 24));
      const formattedDate = date.toISOString().split('T')[0]; // Format date as YYYY-MM-DD

      if (i === MAX_PERIOD - diffDays) {
        serviceTypeArray[i] = { status: event.newStatus, date: formattedDate }; // Use the event's date for the first occurrence
      }
      if (i > MAX_PERIOD - diffDays) {
        serviceTypeArray[i] = serviceTypeArray[i] || { status: event.newStatus, date: formattedDate };
      }
    }
  });

  console.log(serviceTypeDays);

  // The serviceTypeDays object now contains arrays of days with statuses and dates for each serviceType
  return serviceTypeDays;
}
---

  // When all dates filled for each serviceType, stop iterating
  // The serviceTypeDays object now contains arrays of days with statuses and dates for each serviceType
  return serviceTypeDays;
}
---

